package com.zeuskorps.parserkt.infrastructure.ollama.domain.valueobjects

/**
 * Prompt flex√≠vel que permite interpreta√ß√£o inteligente de texto livre para flashcards
 */
data class FlexibleOllamaFlashcardPattern(
    val systemPrompt: String,
    val instructionPrefix: String = "",
    val instructionSuffix: String = "",
    val examples: List<String> = emptyList()
) {
    fun formatPrompt(rawContent: String): String {
        return buildString {
            appendLine(systemPrompt)
            appendLine()

            // Adiciona exemplos se dispon√≠veis
            if (examples.isNotEmpty()) {
                appendLine("EXEMPLOS DE INTERPRETA√á√ÉO:")
                examples.forEach { example ->
                    appendLine(example)
                }
                appendLine()
            }

            appendLine(instructionPrefix)
            appendLine(rawContent.trim())
            appendLine()
            appendLine(instructionSuffix)
        }.trim()
    }

    companion object {
        val flexible: FlexibleOllamaFlashcardPattern = FlexibleOllamaFlashcardPattern(
            systemPrompt = """
                Voc√™ √© um assistente especializado em criar flashcards a partir de qualquer tipo de texto.
                
                Sua miss√£o √© INTERPRETAR INTELIGENTEMENTE o conte√∫do e extrair conhecimento √∫til para estudo,
                mesmo quando o texto n√£o segue um formato r√≠gido.
                
                CAPACIDADES DE INTERPRETA√á√ÉO:
                
                1. **TEXTO ESTRUTURADO** (com marcadores como **[Campo]**):
                   - Extraia exatamente como est√° marcado
                
                2. **TEXTO LIVRE** (pergunta e resposta soltas):
                   - Identifique perguntas (frases com ?, "o que √©", "como", "quando", etc.)
                   - Identifique respostas (explica√ß√µes, defini√ß√µes, procedimentos)
                   - Crie examples baseados no contexto
                   - Gere counter-examples e challenges relacionados
                
                3. **DEFINI√á√ïES/CONCEITOS**:
                   - Transforme "X √© Y" em pergunta "O que √© X?" ‚Üí resposta "Y"
                   - Crie exemplos pr√°ticos do conceito
                
                4. **LISTAS E T√ìPICOS**:
                   - Transforme cada item em uma pergunta-resposta
                   - Use o contexto para inferir o universo de conhecimento
                
                5. **TEXTO CORRIDO/PAR√ÅGRAFOS**:
                   - Extraia fatos importantes como Q&A
                   - Identifique conceitos-chave para transformar em flashcards
                
                MAPEAMENTO INTELIGENTE DE CAMPOS:
                
                - **universe**: Infira da √°rea do conhecimento (matem√°tica, hist√≥ria, programa√ß√£o, etc.)
                                Se n√£o conseguir identificar, use o assunto geral ou deixe vazio
                
                - **question**: Pode ser uma pergunta expl√≠cita OU transforme afirma√ß√µes em perguntas
                              Ex: "Python √© uma linguagem" ‚Üí "O que √© Python?"
                
                - **response**: A resposta direta ou defini√ß√£o principal
                
                - **example**: Crie exemplos pr√°ticos, casos de uso, ou analogias
                              Se houver no texto, use. Se n√£o, crie baseado no conhecimento
                
                - **counterExample**: Casos onde o conceito N√ÉO se aplica ou conceitos opostos
                                    Se n√£o for relevante, deixe vazio
                
                - **counterExampleCorrection**: Como corrigir ou explicar o counter-example
                                              Se counterExample estiver vazio, deixe vazio
                
                - **challenge**: Pergunta mais avan√ßada ou aplica√ß√£o pr√°tica do conceito
                               Deve testar compreens√£o mais profunda
                
                REGRAS CR√çTICAS:
                - Retorne APENAS um array JSON v√°lido
                - Se um campo n√£o fizer sentido para o conte√∫do, use string vazia ""
                - SEJA CRIATIVO na interpreta√ß√£o, mas PRECISO no conte√∫do
                - Prefira criar M√öLTIPLOS flashcards simples a um complexo
                - Use linguagem clara e educativa
                - Mantenha consist√™ncia no n√≠vel de formalidade do texto original
                
                formato da saida: 
                
                {
                    "universe": "mapeamento aqui",
                    "question": "mapeamento aqui",
                    "response": "mapeamento aqui",
                    "example": "mapeamento aqui",
                    "counterexample": "mapeamento aqui",
                    "counterExampleCorrection": "mapeamento aqui",
                    "challenge": "mapeamento aqui"
                }
                
               ou seja, um JSON VALIDO. N√ÉO ESQUE√áA DISSO
            """.trimIndent(),

            instructionPrefix = "TEXTO PARA INTERPRETAR:",

            instructionSuffix = """
                Analise o texto acima e crie flashcards seguindo estas diretrizes:
                
                1. Se h√° FORMATO ESTRUTURADO (marcadores **[Campo]**): siga exatamente
                2. Se √© TEXTO LIVRE: interprete inteligentemente
                3. Se s√£o DEFINI√á√ïES: transforme em perguntas
                4. Se s√£o LISTAS: crie um flashcard por item relevante
                
                Retorne o array JSON completo:
            """.trimIndent(),

            examples = listOf(
                """
                EXEMPLO 1 - Texto livre:
                Input: "Python √© uma linguagem de programa√ß√£o de alto n√≠vel. √â f√°cil de aprender."
                Output: [{"universe":"Programa√ß√£o","question":"O que √© Python?","response":"Uma linguagem de programa√ß√£o de alto n√≠vel","example":"print('Hello World')","counterExample":"Assembly √© de baixo n√≠vel","counterExampleCorrection":"Assembly trabalha diretamente com hardware, Python abstrai isso","challenge":"Quais s√£o as vantagens de linguagens de alto n√≠vel?"}]
                """.trimIndent(),

                """
                EXEMPLO 2 - Pergunta direta:
                Input: "Como funciona a fotoss√≠ntese? As plantas capturam luz solar e CO2 para produzir glicose."
                Output: [{"universe":"Biologia","question":"Como funciona a fotoss√≠ntese?","response":"As plantas capturam luz solar e CO2 para produzir glicose","example":"Folhas verdes fazendo fotoss√≠ntese durante o dia","counterExample":"Respira√ß√£o celular consome oxig√™nio","counterExampleCorrection":"Fotoss√≠ntese produz oxig√™nio, respira√ß√£o consome","challenge":"Por que plantas tamb√©m fazem respira√ß√£o celular?"}]
                """.trimIndent(),

                """
                EXEMPLO 3 - Lista de conceitos:
                Input: "Tipos de loops: for, while, do-while"
                Output: [
                  {"universe":"Programa√ß√£o","question":"Quais s√£o os tipos principais de loops?","response":"for, while, do-while","example":"for(int i=0; i<10; i++)","counterExample":"","counterExampleCorrection":"","challenge":"Quando usar cada tipo de loop?"},
                  {"universe":"Programa√ß√£o","question":"Qual a diferen√ßa entre while e do-while?","response":"while testa condi√ß√£o antes, do-while testa depois","example":"while(x>0) vs do{...}while(x>0)","counterExample":"","counterExampleCorrection":"","challenge":"Em que situa√ß√£o do-while √© prefer√≠vel?"}
                ]
                """.trimIndent()
            )
        )

        val creative: FlexibleOllamaFlashcardPattern = FlexibleOllamaFlashcardPattern(
            systemPrompt = """
                Voc√™ √© um CRIADOR CRIATIVO de flashcards que transforma qualquer texto em material de estudo envolvente.
                
                SEJA EXTREMAMENTE CRIATIVO na interpreta√ß√£o, mas mantenha PRECIS√ÉO FACTUAL.
                
                SUPERPODERES DE INTERPRETA√á√ÉO:
                
                üß† **DETEC√á√ÉO DE CONHECIMENTO IMPL√çCITO**
                   - Encontre fatos "escondidos" no texto
                   - Transforme contexto em perguntas expl√≠citas
                   - Conecte conceitos relacionados
                
                üéØ **GERA√á√ÉO INTELIGENTE DE CONTE√öDO**
                   - Se faltam examples: CRIE baseado no dom√≠nio
                   - Se faltam challenges: INVENTE testes de compreens√£o
                   - Se faltam counter-examples: IMAGINE casos contr√°rios
                
                üîÑ **M√öLTIPLAS PERSPECTIVAS**
                   - Um conceito pode virar v√°rios flashcards
                   - Diferentes n√≠veis de dificuldade
                   - √Çngulos pr√°ticos vs te√≥ricos
                
                üé® **CRIATIVIDADE EDUCACIONAL**
                   - Use analogias interessantes
                   - Crie cen√°rios pr√°ticos
                   - Fa√ßa conex√µes interdisciplinares
                
                SEJA UM PROFESSOR PARTICULAR QUE CONHECE TODAS AS MAT√âRIAS!
            """.trimIndent(),

            instructionPrefix = "üîç MATERIAL PARA TRANSFORMAR EM FLASHCARDS INCR√çVEIS:",

            instructionSuffix = """
                üéØ SUA MISS√ÉO:
                1. INTERPRETE com criatividade m√°xima
                2. EXTRAIA todo conhecimento poss√≠vel  
                3. CRIE conte√∫do adicional quando necess√°rio
                4. GARANTA que cada flashcard ensina algo valioso
                
                üí° LEMBRE-SE: Voc√™ pode criar examples, challenges e counter-examples 
                   mesmo se n√£o estiverem no texto original!
                
                üöÄ RETORNE O ARRAY JSON DOS FLASHCARDS:
            """.trimIndent(),

            examples = listOf(
                """
                EXEMPLO CRIATIVO:
                Input: "Einstein nasceu em 1879"
                Output: [
                  {"universe":"F√≠sica/Hist√≥ria","question":"Quando Einstein nasceu?","response":"1879","example":"No mesmo s√©culo que a inven√ß√£o da l√¢mpada","counterExample":"Newton nasceu em 1643","counterExampleCorrection":"Einstein √© 236 anos mais novo que Newton","challenge":"Que descobertas cient√≠ficas aconteceram no s√©culo XIX que influenciaram Einstein?"},
                  {"universe":"F√≠sica","question":"Quantos anos Einstein viveu?","response":"76 anos (1879-1955)","example":"Viveu duas guerras mundiais","counterExample":"","counterExampleCorrection":"","challenge":"Como os eventos hist√≥ricos da √©poca de Einstein influenciaram sua ci√™ncia?"}
                ]
                """.trimIndent()
            )
        )

        val minimal: FlexibleOllamaFlashcardPattern = FlexibleOllamaFlashcardPattern(
            systemPrompt = """
                Extraia flashcards de qualquer texto, estruturado ou livre.
                
                INTERPRETA√á√ÉO AUTOM√ÅTICA:
                - Formato **[Campo]**: use exatamente como marcado
                - Texto livre: transforme em pergunta-resposta
                - Listas: um flashcard por item importante
                
                CAMPOS:
                - universe: √°rea do conhecimento (inferir se necess√°rio)
                - question: pergunta expl√≠cita ou criada a partir do conte√∫do
                - response: resposta direta
                - example: exemplo pr√°tico (criar se necess√°rio)
                - counterExample: caso contr√°rio (vazio se n√£o relevante)
                - counterExampleCorrection: explica√ß√£o do counter-example
                - challenge: pergunta mais avan√ßada
                
                Retorne APENAS array JSON v√°lido.
            """.trimIndent(),

            instructionPrefix = "Texto:",
            instructionSuffix = "JSON:"
        )

        // M√©todo para criar pattern personalizado
        fun custom(
            creativity: CreativityLevel = CreativityLevel.BALANCED,
            focus: FocusArea = FocusArea.GENERAL,
            strictness: StrictnessLevel = StrictnessLevel.FLEXIBLE
        ): FlexibleOllamaFlashcardPattern {

            val basePrompt = when (creativity) {
                CreativityLevel.CONSERVATIVE -> "Extraia flashcards seguindo fielmente o conte√∫do fornecido."
                CreativityLevel.BALANCED -> "Interprete o conte√∫do inteligentemente e crie flashcards √∫teis."
                CreativityLevel.CREATIVE -> "Seja criativo na interpreta√ß√£o e enrique√ßa o conte√∫do com conhecimento adicional."
            }

            val focusInstruction = when (focus) {
                FocusArea.ACADEMIC -> "Mantenha tom acad√™mico e formal."
                FocusArea.PRACTICAL -> "Foque em aplica√ß√µes pr√°ticas e exemplos do dia a dia."
                FocusArea.GENERAL -> "Adapte-se ao estilo do conte√∫do original."
                FocusArea.TECHNICAL -> "Use terminologia t√©cnica precisa."
            }

            val strictnessInstruction = when (strictness) {
                StrictnessLevel.RIGID -> "Siga exatamente o formato e conte√∫do do texto."
                StrictnessLevel.FLEXIBLE -> "Adapte-se ao formato do texto e interprete livremente."
                StrictnessLevel.VERY_FLEXIBLE -> "Transforme qualquer conte√∫do em flashcards √∫teis, mesmo que seja muito diferente do original."
            }

            return FlexibleOllamaFlashcardPattern(
                systemPrompt = """
                    $basePrompt
                    $focusInstruction
                    $strictnessInstruction
                    
                    Retorne apenas array JSON v√°lido com os flashcards extra√≠dos.
                """.trimIndent(),
                instructionPrefix = "Conte√∫do:",
                instructionSuffix = "Flashcards JSON:"
            )
        }
    }
}

enum class CreativityLevel {
    CONSERVATIVE,  // Segue fielmente o texto
    BALANCED,      // Interpreta inteligentemente
    CREATIVE       // Enriquece com conhecimento adicional
}

enum class FocusArea {
    ACADEMIC,      // Tom formal e acad√™mico
    PRACTICAL,     // Aplica√ß√µes pr√°ticas
    GENERAL,       // Adapta-se ao conte√∫do
    TECHNICAL      // Terminologia t√©cnica precisa
}

enum class StrictnessLevel {
    RIGID,         // Formato exato
    FLEXIBLE,      // Adapta formato
    VERY_FLEXIBLE  // M√°xima liberdade interpretativa
}