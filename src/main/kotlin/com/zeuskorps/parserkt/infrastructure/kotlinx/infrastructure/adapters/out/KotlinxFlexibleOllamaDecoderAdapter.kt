package com.zeuskorps.parserkt.infrastructure.kotlinx.infrastructure.adapters.out

import com.zeuskorps.parserkt.application.dto.FlashcardDto
import com.zeuskorps.parserkt.infrastructure.kotlinx.domain.entities.SerializableFlashcard
import com.zeuskorps.parserkt.infrastructure.kotlinx.domain.entities.toDto
import com.zeuskorps.parserkt.infrastructure.ktor.application.valueobjects.OllamaDecodingException
import com.zeuskorps.parserkt.infrastructure.ollama.application.ports.out.OllamaResponseDecoderProviderPort
import com.zeuskorps.parserkt.infrastructure.ollama.application.ports.out.OllamaStreamingDecoderPort
import com.zeuskorps.parserkt.infrastructure.ollama.domain.valueobjects.OllamaStreamingModeConfig
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.jsonObject
import kotlinx.serialization.json.jsonPrimitive

class KotlinxFlexibleOllamaDecoderAdapter(
    private val defaultMode: OllamaStreamingModeConfig = OllamaStreamingModeConfig.AUTODETECT
) : OllamaResponseDecoderProviderPort, OllamaStreamingDecoderPort {

    private val json = Json { ignoreUnknownKeys = true }

    override suspend fun decode(raw: String): List<FlashcardDto> {
        println("üîç Resposta bruta recebida (primeiros 500 chars): ${raw.take(500)}")

        return when (defaultMode) {
            is OllamaStreamingModeConfig.DISABLED -> runCatching { decodeNonStreaming(raw) }.getOrElse {
                println("‚ö†Ô∏è Falha no modo n√£o-streaming: ${it.message}")
                decodeAutoDetect(raw)
            }
            is OllamaStreamingModeConfig.ENABLED -> runCatching { decodeStreaming(raw) }.getOrElse {
                println("‚ö†Ô∏è Falha no modo streaming: ${it.message}")
                decodeAutoDetect(raw)
            }
            is OllamaStreamingModeConfig.AUTODETECT -> decodeAutoDetect(raw)
        }
    }

    override suspend fun decodeStreaming(rawStreamingResponse: String): List<FlashcardDto> {
        println("üîÑ Decodificando resposta streaming...")

        val contentBuilder = StringBuilder()
        val lines = rawStreamingResponse.lines()

        for (line in lines) {
            val trimmedLine = line.trim()
            if (trimmedLine.isEmpty()) continue

            try {
                val jsonObj = json.parseToJsonElement(trimmedLine).jsonObject
                val response = jsonObj["response"]?.jsonPrimitive?.content
                val isDone = jsonObj["done"]?.jsonPrimitive?.content?.toBooleanStrictOrNull() == true

                if (!response.isNullOrEmpty()) {
                    contentBuilder.append(response)
                }

                if (isDone) {
                    break
                }
            } catch (e: Exception) {
                println("‚ö†Ô∏è Ignorando linha malformada no streaming: $trimmedLine")
                continue
            }
        }

        val finalContent = contentBuilder.toString().trim()
        println("üìÑ Conte√∫do final extra√≠do do streaming: $finalContent")

        return parseFlashcardsFromContent(finalContent)
    }

    override suspend fun decodeNonStreaming(rawJsonResponse: String): List<FlashcardDto> {
        println("üìÑ Decodificando resposta n√£o-streaming...")

        return try {
            // Estrat√©gia 1: Tentar como array JSON direto
            json.decodeFromString<List<SerializableFlashcard>>(rawJsonResponse.trim())
                .map { it.toDto() }
        } catch (arrayException: Exception) {
            println("‚ö†Ô∏è N√£o √© um array JSON direto: ${arrayException.message}")

            try {
                // Estrat√©gia 2: Tentar extrair de objeto Ollama √∫nico
                val jsonObj = json.parseToJsonElement(rawJsonResponse.trim()).jsonObject

                // üî• CORRE√á√ÉO: Verificar diferentes campos poss√≠veis
                val responseContent = jsonObj["response"]?.jsonPrimitive?.content
                    ?: jsonObj["content"]?.jsonPrimitive?.content
                    ?: jsonObj["message"]?.jsonPrimitive?.content
                    ?: throw OllamaDecodingException("Nenhum campo de resposta encontrado. Campos dispon√≠veis: ${jsonObj.keys}")

                println("üìÑ Conte√∫do extra√≠do do campo response: $responseContent")
                parseFlashcardsFromContent(responseContent)

            } catch (objException: Exception) {
                println("‚ö†Ô∏è N√£o √© um objeto Ollama v√°lido: ${objException.message}")

                // Estrat√©gia 3: Tentar extrair JSON de texto livre
                parseFlashcardsFromContent(rawJsonResponse.trim())
            }
        }
    }

    override suspend fun decodeAutoDetect(rawResponse: String): List<FlashcardDto> {
        println("üïµÔ∏è Auto-detectando formato da resposta...")

        if (rawResponse.isBlank()) {
            throw OllamaDecodingException("Resposta vazia do Ollama")
        }

        // Detectar se √© streaming (m√∫ltiplas linhas com "done")
        val isStreaming = rawResponse.contains("\"done\":") && rawResponse.lines().size > 1

        return if (isStreaming) {
            println("üîÑ Detectado: formato streaming")
            decodeStreaming(rawResponse)
        } else {
            println("üìÑ Detectado: formato n√£o-streaming")
            decodeNonStreaming(rawResponse)
        }
    }

    private fun parseFlashcardsFromContent(content: String): List<FlashcardDto> {
        if (content.isBlank()) {
            throw OllamaDecodingException("Conte√∫do vazio ap√≥s extra√ß√£o")
        }

        println("üîç Tentando parsear conte√∫do: ${content.take(200)}...")

        // Estrat√©gia 1: JSON array direto
        val jsonArrayPattern = Regex("""\[[\s\S]*?\]""")
        val arrayMatch = jsonArrayPattern.find(content)

        if (arrayMatch != null) {
            try {
                val flashcards = json.decodeFromString<List<SerializableFlashcard>>(arrayMatch.value)
                    .map { it.toDto() }
                println("‚úÖ Sucesso com JSON array: ${flashcards.size} flashcards")
                return flashcards
            } catch (e: Exception) {
                println("‚ö†Ô∏è Falha ao parsear como array JSON: ${e.message}")
            }
        }

        // Estrat√©gia 2: M√∫ltiplos objetos JSON
        val objectPattern = Regex("""\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}""")
        val objects = objectPattern.findAll(content).toList()

        if (objects.isNotEmpty()) {
            val flashcards = mutableListOf<FlashcardDto>()
            for (objMatch in objects) {
                try {
                    val flashcard = json.decodeFromString<SerializableFlashcard>(objMatch.value)
                    flashcards.add(flashcard.toDto())
                    println("‚úÖ Objeto JSON parseado com sucesso")
                } catch (e: Exception) {
                    println("‚ö†Ô∏è Ignorando objeto JSON malformado: ${objMatch.value.take(100)}...")
                }
            }

            if (flashcards.isNotEmpty()) {
                println("‚úÖ Sucesso com m√∫ltiplos objetos: ${flashcards.size} flashcards")
                return flashcards
            }
        }

        // Estrat√©gia 3: Procurar por JSON embutido em texto
        val embeddedJsonPattern = Regex("""```json\s*([\s\S]*?)\s*```""")
        val embeddedMatch = embeddedJsonPattern.find(content)

        if (embeddedMatch != null) {
            try {
                val jsonContent = embeddedMatch.groupValues[1].trim()
                println("üîç JSON embutido encontrado: ${jsonContent.take(100)}...")
                return parseFlashcardsFromContent(jsonContent)
            } catch (e: Exception) {
                println("‚ö†Ô∏è JSON embutido malformado: ${e.message}")
            }
        }

        throw OllamaDecodingException(
            "N√£o foi poss√≠vel extrair flashcards v√°lidos do conte√∫do.\n" +
                    "Conte√∫do recebido: $content"
        )
    }
}